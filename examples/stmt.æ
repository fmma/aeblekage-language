type Stmt
    foo: number
    foo =
        e

        // let1
        x = e1
        e2

        // let2
        x =
            e1
            ..
        e

        // app2
        e
            e1
            ..

        // chaining not good
        ((e.x1 e1).x2 e2).x3 e3
        // chain2
        e
            .x1 e1
            .x2 e2
            .x3 e3

        // chain/app
        e
            [.x1] e1
            [.x2] e2
            [.x3] e3
        // eg
        e
            e1
            .x2 e2
            e3
            name = "bob"
        
        e id e nl .x e nl e dd

        (((e) e1).x2 e2) e3

        e id (sep nl ((.x | x =)? e)) dd --> foldl ...

        // lambda
        f x =
            e1
            ..
        e

        // dto constructor
        e
            x1 = e1
            x2 = e2
            ..
        
        (xs.where (x => ..)).select (x => ..) // :(
        xs
            .where x => ..
            .select x => Dto
                id = x.id
                name = x.name
                ...
        
e1 e2
