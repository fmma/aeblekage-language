import examples.maybe
import examples.bool

type list a
    fold b: b -> (a -> list a -> b) -> b
    foldr b: b -> (a -> b -> b) -> b
    foldl b: b -> (b -> a -> b) -> b
    head: maybe a
    append: list a -> list a
    length: number
    map b: (a -> b) -> list b
    flatmap b: (a -> list b) -> list b
    filter: (a -> bool) -> list a

/* TODO
    instance list number
        sum: number
        product: number

    instance list Bool
        and: Bool
        or: Bool

    forall b. instance list (list b)
        concat: list b
*/
